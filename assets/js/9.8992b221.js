(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{165:function(t,s,n){"use strict";n.r(s);var e=n(0),a=Object(e.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("p",[t._v("PostCSS has great "),n("a",{attrs:{href:"http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/",target:"_blank",rel:"noopener noreferrer"}},[t._v("source maps"),n("OutboundLink")],1),t._v(" support. It can read and interpret maps\nfrom previous transformation steps, autodetect the format that you expect,\nand output both external and inline maps.")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),n("p",[t._v("If PostCSS finds source maps from a previous transformation,\nit will automatically update that source map with the same options.")]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"postcss-and-source-maps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#postcss-and-source-maps","aria-hidden":"true"}},[this._v("#")]),this._v(" PostCSS and Source Maps")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("To ensure that you generate an accurate source map, you must indicate the input\nand output CSS file paths — using the options "),s("code",[this._v("from")]),this._v(" and "),s("code",[this._v("to")]),this._v(", respectively.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("To generate a new source map with the default options, simply set "),s("code",[this._v("map: true")]),this._v(".\nThis will generate an inline source map that contains the source content.\nIf you don’t want the map inlined, you can set "),s("code",[this._v("map.inline: false")]),this._v(".")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("processor\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("process")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("css"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'app.sass.css'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        to"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("   "),n("span",{attrs:{class:"token string"}},[t._v("'app.css'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        map"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" inline"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("then")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        result"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("map "),n("span",{attrs:{class:"token comment"}},[t._v('//=> \'{ "version":3,')]),t._v("\n                   "),n("span",{attrs:{class:"token comment"}},[t._v('//      "file":"app.css",')]),t._v("\n                   "),n("span",{attrs:{class:"token comment"}},[t._v('//      "sources":["app.sass"],')]),t._v("\n                   "),n("span",{attrs:{class:"token comment"}},[t._v('//       "mappings":"AAAA,KAAI" }\'')]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#options","aria-hidden":"true"}},[this._v("#")]),this._v(" Options")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("If you want more control over source map generation, you can define the "),s("code",[this._v("map")]),this._v("\noption as an object with the following parameters:")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[n("p",[n("code",[t._v("inline")]),t._v(" boolean: indicates that the source map should be embedded\nin the output CSS as a Base64-encoded comment. By default, it is "),n("code",[t._v("true")]),t._v(".\nBut if all previous maps are external, not inline, PostCSS will not embed\nthe map even if you do not set this option.")]),t._v(" "),n("p",[t._v("If you have an inline source map, the "),n("code",[t._v("result.map")]),t._v(" property will be empty,\nas the source map will be contained within the text of "),n("code",[t._v("result.css")]),t._v(".")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("prev")]),t._v(" string, object, boolean or function: source map content from\na previous processing step (for example, Sass compilation).\nPostCSS will try to read the previous source map automatically\n(based on comments within the source CSS), but you can use this option\nto identify it manually. If desired, you can omit the previous map\nwith "),n("code",[t._v("prev: false")]),t._v(".")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("sourcesContent")]),t._v(" boolean: indicates that PostCSS should set the origin\ncontent (for example, Sass source) of the source map. By default,\nit is "),n("code",[t._v("true")]),t._v(". But if all previous maps do not contain sources content,\nPostCSS will also leave it out even if you do not set this option.")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("annotation")]),t._v(" boolean or string: indicates that PostCSS should add annotation\ncomments to the CSS. By default, PostCSS will always add a comment with a path\nto the source map. PostCSS will not add annotations to CSS files that\ndo not contain any comments.")]),t._v(" "),n("p",[t._v("By default, PostCSS presumes that you want to save the source map as\n"),n("code",[t._v("opts.to + '.map'")]),t._v(" and will use this path in the annotation comment.\nA different path can be set by providing a string value for "),n("code",[t._v("annotation")]),t._v(".")]),t._v(" "),n("p",[t._v("If you have set "),n("code",[t._v("inline: true")]),t._v(", annotation cannot be disabled.")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("from")]),t._v(" string: by default, PostCSS will set the "),n("code",[t._v("sources")]),t._v(" property of the map\nto the value of the "),n("code",[t._v("from")]),t._v(" option. If you want to override this behaviour, you\ncan use "),n("code",[t._v("map.from")]),t._v(" to explicitly set the source map's "),n("code",[t._v("sources")]),t._v(" property.\nPath should be absolute or relative from generated file\n("),n("code",[t._v("to")]),t._v(" option in "),n("code",[t._v("process()")]),t._v(" method).")])])])}],!1,null,null,null);a.options.__file="source-maps.md";s.default=a.exports}}]);