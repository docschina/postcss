(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{164:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),a("p",[t._v("PostCSS可以转换任何语法的样式，不仅仅局限于CSS。通过编写自定义语法，你可以转换任何期望格式的样式。")]),t._v(" "),a("p",[t._v("编写自定义语法要比编写PostCSS插件困难得多，但这是个值得体验的冒险。")]),t._v(" "),a("p",[t._v("有3种类型的PostCSS语法包：")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),a("p",[t._v("自定义语法的一个很好的例子是"),a("a",{attrs:{href:"https://github.com/postcss/postcss-scss",target:"_blank",rel:"noopener noreferrer"}},[t._v("SCSS"),a("OutboundLink")],1),t._v("。一些用户可能想要使用PostCSS插件转换SCSS源文件，例如添加前缀或更改属性的顺序。因此这样的语法应该输入一个SCSS源文件并输出另一个SCSS文件。")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._m(5),t._v(" "),a("p",[t._v("解析器的一个很好的例子是"),a("a",{attrs:{href:"https://github.com/postcss/postcss-safe-parser",target:"_blank",rel:"noopener noreferrer"}},[t._v("Safe Parser"),a("OutboundLink")],1),t._v("，它可以解析格式不正确的或不完整的CSS。因为产生残缺的输出没有任何意义，因此这个包只提供了一个解析器。")]),t._v(" "),a("p",[t._v("解析器API是一个函数，它接收一个字符串并返回一个"),a("a",{attrs:{href:"http://api.postcss.org/Root.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("Root")]),a("OutboundLink")],1),t._v("节点。第二个参数是一个函数，它接收一个PostCSS选项对象做为参数。")]),t._v(" "),t._m(6),t._m(7),t._v(" "),a("p",[t._v("市面上有很多关于解析器的书；但是不要担心，因为CSS语法非常简单，所以它的解析器比一般编程语言的解析器简单得多。")]),t._v(" "),a("p",[t._v("默认的PostCSS解析器包含两个步骤：")]),t._v(" "),a("p",[t._v("1."),a("a",{attrs:{href:"https://github.com/postcss/postcss/blob/master/lib/tokenize.es6",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tokenizer"),a("OutboundLink")],1),t._v("逐字符读入输入的字符串，建立一个令牌数组。例如，它将空格符号连接到"),a("code",[t._v("['space', '\\n ']")]),t._v("令牌，将检测到字符串添加到"),a("code",[t._v("['string', '\"\\\"{\"']")]),t._v("令牌。\n2."),a("a",{attrs:{href:"https://github.com/postcss/postcss/blob/master/lib/parser.es6",target:"_blank",rel:"noopener noreferrer"}},[t._v("Parser"),a("OutboundLink")],1),t._v("读取令牌数组，创建节点实例并生成建树。")]),t._v(" "),t._m(8),t._v(" "),a("p",[t._v("解析输入的字符通常是CSS处理器中最耗时的任务。所以拥有一个快速的解析器是非常重要的。")]),t._v(" "),a("p",[t._v("优化的主要原则是没有基准就没有性能指标，你可以根据"),a("a",{attrs:{href:"https://github.com/postcss/benchmark",target:"_blank",rel:"noopener noreferrer"}},[t._v("PostCSS benchmarks"),a("OutboundLink")],1),t._v("来建立你自己的基准。")]),t._v(" "),a("p",[t._v("在解析任务中，令牌化的步骤往往需要最多的时间，所以应该优先考虑它的性能。不幸的是，类，函数和高阶结构会减缓令牌化的过程，所以准备好写重复冗余的脏代码吧。这也是难以扩展默认的"),a("a",{attrs:{href:"https://github.com/postcss/postcss/blob/master/lib/tokenize.es6",target:"_blank",rel:"noopener noreferrer"}},[t._v("PostCSS tokenizer"),a("OutboundLink")],1),t._v("的原因;复制和粘贴将是一个不可避免的操作手段。")]),t._v(" "),a("p",[t._v("第二个优化点是使用字符编码来代替字符串。")]),t._v(" "),t._m(9),t._m(10),t._v(" "),t._m(11),a("p",[t._v("解析器可以是一个写得很好的类。没有必要进行复制粘贴和硬性优化。你可以扩展默认的"),a("a",{attrs:{href:"https://github.com/postcss/postcss/blob/master/lib/parser.es6",target:"_blank",rel:"noopener noreferrer"}},[t._v("PostCSS parser"),a("OutboundLink")],1),t._v("。")]),t._v(" "),t._m(12),t._v(" "),a("p",[t._v("每个节点应该都有一个"),a("code",[t._v("source")]),t._v("属性来生成正确的源映射。该属性包含"),a("code",[t._v("start")]),t._v("和"),a("code",[t._v("end")]),t._v("属性，可以表示成"),a("code",[t._v("{line，column}")]),t._v("，还应该包含"),a("code",[t._v("input")]),t._v("属性，其值为"),a("a",{attrs:{href:"https://github.com/postcss/postcss/blob/master/lib/input.es6",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("Input")]),a("OutboundLink")],1),t._v("实例。")]),t._v(" "),a("p",[t._v("你的分词器应该保存原始的位置，以便将值传递给解析器，同时确保源映射被正确更新。")]),t._v(" "),t._m(13),t._v(" "),a("p",[t._v("一个好的PostCSS解析器应该提供所有的信息（包括空格符号）以生成字节到字节的幂等输出。这并不是很难，难的遵从用户输入并允许集成烟雾测试。")]),t._v(" "),a("p",[t._v("解析器应该将所有附加符号保存到"),a("code",[t._v("node.raws")]),t._v("对象中。对你来说，这个对象是一个开放的结构，你可以添加额外的键。例如，"),a("a",{attrs:{href:"https://github.com/postcss/postcss-scss",target:"_blank",rel:"noopener noreferrer"}},[t._v("SCSS parser"),a("OutboundLink")],1),t._v("将注释类型（"),a("code",[t._v("/ * * /")]),t._v("或"),a("code",[t._v("//")]),t._v("）保存在"),a("code",[t._v("node.raws.inline")]),t._v("中。")]),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),a("p",[t._v("当然，PostCSS生态系统中的所有解析器都必须有测试。")]),t._v(" "),a("p",[t._v("如果您的解析器只是扩展了CSS语法（如"),a("a",{attrs:{href:"https://github.com/postcss/postcss-scss",target:"_blank",rel:"noopener noreferrer"}},[t._v("SCSS"),a("OutboundLink")],1),t._v("或"),a("a",{attrs:{href:"https://github.com/postcss/postcss-safe-parser",target:"_blank",rel:"noopener noreferrer"}},[t._v("Safe Parser"),a("OutboundLink")],1),t._v("),你可以使用"),a("a",{attrs:{href:"https://github.com/postcss/postcss-parser-tests",target:"_blank",rel:"noopener noreferrer"}},[t._v("PostCSS Parser Tests"),a("OutboundLink")],1),t._v("。它包含单元和集成测试。")]),t._v(" "),t._m(16),t._v(" "),a("p",[t._v("样式生成器是一个很好的字符串生成器的例子。它生成包含CSS组件的HTML。对于这个用例，解析器是不必要的，所以此时语法包应该只包含一个字符串生成器。")]),t._v(" "),a("p",[t._v("字符串生成器API比解析器API要复杂一点。PostCSS生成一个源映射，所以一个字符串生成器不能只返回一个字符串。它必须链接每个子串与其源节点。")]),t._v(" "),a("p",[t._v("字符串生成器是一个函数，它接收"),a("a",{attrs:{href:"http://api.postcss.org/Root.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("Root")]),a("OutboundLink")],1),t._v("节点和构建回调函数作为参数。然后它将节点字符串和节点实例作为参数调用构建回调函数。")]),t._v(" "),t._m(17),t._m(18),t._v(" "),a("p",[t._v("PostCSS "),a("a",{attrs:{href:"https://github.com/postcss/postcss/blob/master/lib/stringifier.es6",target:"_blank",rel:"noopener noreferrer"}},[t._v("default stringifier"),a("OutboundLink")],1),t._v("只是一个类，它有一个方法来处理每种节点类型，并且拥有很多方法来检测原始属性。")]),t._v(" "),a("p",[t._v("在大多数情况下，只要扩展这个类就足够了，就像在"),a("a",{attrs:{href:"https://github.com/postcss/postcss-scss/blob/master/lib/scss-stringifier.es6",target:"_blank",rel:"noopener noreferrer"}},[t._v("SCSS stringifier"),a("OutboundLink")],1),t._v("中一样。")]),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),a("p",[t._v("构建函数接收输出子字符串和源节点，并将此子字符串追加到最后的输出。")]),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._m(24),t._v(" "),a("p",[t._v("一个好的PostCSS自定义语法会保存所有的符号，如果没有变化的话，它会提供字节到字节的幂等输出。")]),t._v(" "),t._m(25),t._v(" "),a("p",[t._v("不过要小心，因为有时这些原始属性不会出现;一些节点可能是由手动建立的，或者在移动时到另一个父节点时可能会失去缩进。")]),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),a("p",[t._v("一个字符串生成器也必须有测试。")]),t._v(" "),a("p",[t._v("你可以使用"),a("a",{attrs:{href:"https://github.com/postcss/postcss-parser-tests",target:"_blank",rel:"noopener noreferrer"}},[t._v("PostCSS Parser Tests"),a("OutboundLink")],1),t._v("中的单元和集成测试用例，只需要比较输入的CSS和经过解析器和字符串生成器处理后的CSS。")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"如何编写自定义语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何编写自定义语法","aria-hidden":"true"}},[this._v("#")]),this._v(" 如何编写自定义语法")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("strong",[t._v("解析器")]),t._v("将输入字符串解析成节点树。")]),t._v(" "),a("li",[a("strong",[t._v("字符串生成器")]),t._v("按节点树生成输出字符串。")]),t._v(" "),a("li",[a("strong",[t._v("语法")]),t._v("包含解析器和字符串生成器。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法","aria-hidden":"true"}},[this._v("#")]),this._v(" 语法")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("自定义语法API是一个拥有"),s("code",[this._v("parse")]),this._v("和"),s("code",[this._v("stringify")]),this._v("属性方法的普通对象")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("module"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    parse：    require（"),a("span",{attrs:{class:"token string"}},[t._v("'./ parse'")]),t._v("），\n    stringify：require（"),a("span",{attrs:{class:"token string"}},[t._v("'./ stringify'")]),t._v("）\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"解析器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解析器","aria-hidden":"true"}},[this._v("#")]),this._v(" 解析器")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" postcss "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" require（"),a("span",{attrs:{class:"token string"}},[t._v("'postcss'")]),t._v("）"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nmodule"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function-variable function"}},[t._v("exports")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v("（css，opts）"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" root "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" postcss"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("root（）"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("//Add other nodes to root 将其它节点添加到根节点")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"主要原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主要原理","aria-hidden":"true"}},[this._v("#")]),this._v(" 主要原理")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"性能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能","aria-hidden":"true"}},[this._v("#")]),this._v(" 性能")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// Slow 慢")]),t._v("\nstring"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'{'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// Fast 快")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("OPEN_CURLY")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("123")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("//`{'")]),t._v("\nstring"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("charCodeAt（i）"),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("OPEN_CURLY")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("第三个优化点是“fast jumps(快速跳跃)”。如果你找到开引号，借助"),s("code",[this._v("indexOf")]),this._v("可以更快的找到下一个结束引号。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// Simple jump 简单的跳转")]),t._v("\nnext "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'\"'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currentPosition "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// Jump by RegExp 通过正则来跳转")]),t._v("\nregexp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentPosion "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nregexp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("text")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nnext "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" regexp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"节点源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#节点源","aria-hidden":"true"}},[this._v("#")]),this._v(" 节点源")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"原始值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原始值","aria-hidden":"true"}},[this._v("#")]),this._v(" 原始值")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("默认的解析器从注释和空格中提取出纯净的CSS值。它将原始值与注释保存到"),s("code",[this._v("node.raws.value.raw")]),this._v("中，如果节点值没有发生改变就直接使用它.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试","aria-hidden":"true"}},[this._v("#")]),this._v(" 测试")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"字符串生成器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串生成器","aria-hidden":"true"}},[this._v("#")]),this._v(" 字符串生成器")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("module"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function-variable function"}},[t._v("exports")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v("（root，builder）"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// Some magic一些魔法")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" decl"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prop "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("':'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" decl"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("';'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("builder")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" decl"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// Some science")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"主要原理-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主要原理-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 主要原理")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"构建函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构建函数","aria-hidden":"true"}},[this._v("#")]),this._v(" 构建函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("构建函数将作为第二个参数传递给"),s("code",[this._v("stringify")]),this._v("函数。例如，默认的PostCSS字符串生成器类将其保存到"),s("code",[this._v("this.builder")]),this._v("属性。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("一些节点在中间包含其他节点。例如，一个规则以"),s("code",[this._v("{")]),this._v("开始，里面包含很多声明的时候，然后以"),s("code",[this._v("}")]),this._v("结束。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("对于这些情况，您应该传递第三个参数给构建函数："),s("code",[this._v("'start'")]),this._v(" 或者 "),s("code",[this._v("'end'")]),this._v(" 字符串:")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("builder（rule"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("selector "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token string"}},[t._v("'{'")]),t._v("，rule，"),a("span",{attrs:{class:"token string"}},[t._v("'start'")]),t._v("）"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("//Stringify declarations inside 将内部的声明字符串化")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("builder（"),a("span",{attrs:{class:"token string"}},[t._v("'}'")]),t._v("，rule，"),a("span",{attrs:{class:"token string"}},[t._v("'end'")]),t._v("）"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"原始值-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原始值-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 原始值")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这也就是为什么每个节点都有"),s("code",[this._v("node.raws")]),this._v("对象来存储空间符号等等。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这也就是为什么默认的字符串生成器拥有一个"),s("code",[this._v("raw()")]),this._v("方法来自动检测其他节点的原始属性。例如，它会查看其他节点来检测缩进大小，并将其与当前节点深度相乘。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"测试-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 测试")])}],!1,null,null,null);n.options.__file="syntax.md";s.default=n.exports}}]);